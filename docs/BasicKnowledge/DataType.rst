数据类型
############################

Python 中的变量不需要声明。但变量在使用前必须赋值，变量在赋值以后才会被创建。变量名只能包含字母、数字和下划线，而且不能以数字开头，变量名区分大小写，不能将 Python 定义的关键字用作变量名。

在 Python 中，变量就是变量，它没有类型。我们所说的"类型"是变量所指的对象在内存中的类型。

等号（=）用来给变量赋值。

等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：

.. highlight:: none

::

    counter = 100          # 整型变量
    miles = 1000.0         # 浮点型变量
    name = "runoob"        # 字符串
    a = b = c = 1          # 多个变量赋值

    a, b, c = 1, 2, "runoob"   # 多个变量多个值同时赋值

标准数据类型
******************************

Python3 中有六个标准的数据类型：

* Number（数字）
* String（字符串）
* List（列表）
* Tuple（元组）
* Set（集合）
* Dictionary（字典）

Python3 的六个标准数据类型中：

* 不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；
* 可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。

Number（数字）
===============================

Python3 支持 int（整数）、float（浮点数）、bool（布尔值）、complex（复数）。

像大多数语言一样，数值类型的赋值和计算都是很直观的。

内置的 type() 函数可以用来查询变量所指的对象类型。

::

    >>> a, b, c, d = 20, 5.5, True, 4+3j
    >>> print(type(a), type(b), type(c), type(d))
    <class 'int'> <class 'float'> <class 'bool'> <class 'complex'>

此外还可以用 isinstance 来判断：

::

    >>>a = 111
    >>> isinstance(a, int)
    True
    >>>

isinstance 和 type 的区别在于：

* type()不会认为子类是一种父类类型。
* isinstance()会认为子类是一种父类类型。

注意：在 Python3 中，True 和 False 被定义为关键字，但它们的值还是 1 和 0，它们可以和数字相加。


String（字符串）
=================================

Python 中的字符串用单引号`` ' ``或双引号`` " ``括起来，同时使用反斜杠`` \ ``转义特殊字符。

Python 使用反斜杠转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串：

::

    >>> print('Ru\noob')
    Ru
    oob
    >>> print(r'Ru\noob')
    Ru\noob
    >>>

另外，反斜杠(\)可以作为续行符，表示下一行是上一行的延续。也可以使用 """...""" 或者 '''...''' 跨越多行。


List（列表）
================================

List（列表） 是 Python 中使用最频繁的数据类型。

列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。

列表是写在方括号`` [] ``之间、用逗号分隔开的元素列表。列表可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。


Tuple（元组）
===============================

元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号`` () ``里，元素之间用逗号隔开。


string、list和tuple都属于sequence（序列）。


Set（集合）
=================================

集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。

基本功能是进行成员关系测试和删除重复元素。

可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。

创建格式：

::

    parame = {value01,value02,...}
    或者
    set(value)

Dictionary（字典）
====================================

字典（dictionary）是 Python 中另一个常用的内置数据类型。

列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。

字典是一种映射类型，字典用"{ }"标识，它是一个无序的键(key) : 值(value)对集合。

键(key)必须使用不可变类型。在同一个字典中，键(key)必须是唯一的。


Python数据类型转换
*********************************

有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。

以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。

=======================   ==============
函数                         描述
=======================   ==============
int(x [,base])               将 x 转换为一个整数
float(x)                     将 x 转换到一个浮点数
complex(real [,imag])        创建一个复数
str(x)                       将 x 转换为字符串
repr(x)                      将 x 转换为表达式字符串
eval(str)                    用来计算在字符串中的有效 Python 表达式,并返回一个对象
tuple(s)                     将序列 s 转换为一个元组
list(s)                      将序列 s 转换为一个列表
set(s)                       转换为可变集合
dict(d)                      创建一个字典。d 必须是一个序列 (key,value)元组。
frozenset(s)                 转换为不可变集合
chr(x)                       将一个整数转换为一个字符
ord(x)                       将一个字符转换为它的整数值
hex(x)                       将一个整数转换为一个十六进制字符串
oct(x)                       将一个整数转换为一个八进制字符串
=======================   ==============
