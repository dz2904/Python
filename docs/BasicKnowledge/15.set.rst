集合
#####################

集合（set）是一个无序的不重复元素序列。

可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。

创建格式：

.. highlight:: none

::

    parame = {value01,value02,...}
    或者
    set(value)

    实例
    >>>basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
    # 这里演示的是去重功能
    >>> print(basket)
    {'orange', 'banana', 'pear', 'apple'}

    # 快速判断元素是否在集合内
    >>> 'orange' in basket
    True
    >>> 'crabgrass' in basket
    False

    # 下面展示两个集合间的运算.
    ...
    >>> a = set('abracadabra')
    >>> b = set('alacazam')
    >>> a
    {'a', 'r', 'b', 'c', 'd'}
    # 集合a中包含而集合b中不包含的元素
    >>> a - b
    {'r', 'd', 'b'}
    # 集合a或b中包含的所有元素
    >>> a | b
    {'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}
    # 集合a和b中都包含了的元素
    >>> a & b
    {'a', 'c'}
    # 不同时包含于a和b的元素
    >>> a ^ b
    {'r', 'd', 'b', 'm', 'z', 'l'}

    # 类似列表推导式，同样集合支持集合推导式(Set comprehension):
    >>>a = {x for x in 'abracadabra' if x not in 'abc'}
    >>> a
    {'r', 'd'}


集合的基本操作
********************

添加元素
===============

将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作。

::

    >>> s.add( x )

    >>> thisset = set(("Google", "Runoob", "Taobao"))
    >>> thisset.add("Facebook")
    >>> print(thisset)
    {'Taobao', 'Facebook', 'Google', 'Runoob'}

还有一个方法，也可以添加元素，且参数可以是列表，元组，字典等，语法格式如下：

::

    s.update( x )

x 可以有多个，用逗号分开。

::

    >>>thisset = set(("Google", "Runoob", "Taobao"))
    >>> thisset.update({1,3})
    >>> print(thisset)
    {1, 3, 'Google', 'Taobao', 'Runoob'}
    >>> thisset.update([1,4],[5,6])
    >>> print(thisset)
    {1, 3, 4, 5, 6, 'Google', 'Taobao', 'Runoob'}
    >>>

移除元素
================

::

s.remove( x )

将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误。

::

    >>>thisset = set(("Google", "Runoob", "Taobao"))
    >>> thisset.remove("Taobao")
    >>> print(thisset)
    {'Google', 'Runoob'}

    # 不存在会发生错误
    >>> thisset.remove("Facebook")
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    KeyError: 'Facebook'
    >>>

此外还有一个方法也是移除集合中的元素，且如果元素不存在，不会发生错误。格式如下所示：

::

    s.discard( x )

    实例(Python 3.0+)
    >>>thisset = set(("Google", "Runoob", "Taobao"))
    >>> thisset.discard("Facebook")  # 不存在不会发生错误
    >>> print(thisset)
    {'Taobao', 'Google', 'Runoob'}

我们也可以设置随机删除集合中的一个元素，语法格式如下：

::

    s.pop()

    >>> thisset = set(("Google", "Runoob", "Taobao", "Facebook"))
    >>> x = thisset.pop()

    >>> print(x)
    $ python3 test.py
    Runoob

    多次执行测试结果都不一样。

    然而在交互模式，pop 是删除集合的第一个元素（排序后的集合的第一个元素）。

    >>>thisset = set(("Google", "Runoob", "Taobao", "Facebook"))
    >>> thisset.pop()
    'Facebook'
    >>> print(thisset)
    {'Google', 'Taobao', 'Runoob'}
    >>>

计算集合元素个数
=======================

计算集合 s 元素个数。

::

    len(s)

    >>>thisset = set(("Google", "Runoob", "Taobao"))
    >>> len(thisset)
    3

清空集合
=================

::

    s.clear()

    清空集合 s。
    实例(Python 3.0+)
    >>>thisset = set(("Google", "Runoob", "Taobao"))
    >>> thisset.clear()
    >>> print(thisset)
    set()

判断元素是否在集合中存在
========================

::

    x in s

    判断元素 x 是否在集合 s 中，存在返回 True，不存在返回 False。

    >>>thisset = set(("Google", "Runoob", "Taobao"))
    >>> "Runoob" in thisset
    True
    >>> "Facebook" in thisset
    False


集合内置方法完整列表
*************************

===================================   ==================
方法                                     描述
===================================   ==================
`add()`_	                               为集合添加元素
`clear()`_	                             移除集合中的所有元素
`copy()`_	                               拷贝一个集合
`difference()`_                          返回多个集合的差集
`difference_update()`_                   移除集合中的元素，该元素在指定的集合也存在。
`discard()`_                             删除集合中指定的元素
`intersection()`_                        返回集合的交集
`intersection_update()`_                 删除集合中的元素，该元素在指定的集合中不存在。
`isdisjoint()`_                          判断两个集合是否包含相同的元素
`issubset()`_                            判断指定集合是否为该方法参数集合的子集。
`issuperset()`_                          判断该方法的参数集合是否为指定集合的子集
`pop()`_                                 随机移除元素
`remove()`_                              移除指定元素
`symmetric_difference()`_                返回两个集合中不重复的元素集合。
`symmetric_difference_update()`_         移除包含另一个集合的元素，并将不同的元素插入到当前集合。
`union()`_                               返回两个集合的并集
`update()`_                              给集合添加元素
===================================   ==================

.. _`add()`:

add()方法
================

add() 方法用于给集合添加元素，如果添加的元素在集合中已存在，则不执行任何操作。

语法
----------

::

    set.add(elmnt)

参数
----------

* elmnt - 必需，要添加的元素。

返回值
----------

* 无。

.. _`clear()`:

clear()方法
=================

clear() 方法用于移除集合中的所有元素。

语法
-----------------

::

    set.clear()

参数
-------------

* 无。

返回值
----------

无。

.. _`copy()`:	

copy()方法
==============

copy() 方法用于拷贝一个集合。

语法
--------------

::

    set.copy()

参数
-----------

* 无。

返回值
----------

* 无。

.. _`difference()`:

difference() 方法
=====================

difference() 方法用于返回集合的差集，即返回的集合元素包含在第一个集合中，但不包含在第二个集合(方法的参数)中。

语法
-------------

::

    set.difference(set)

参数
------------

* set - 必需，用于计算差集的集合

返回值
-----------

返回一个新的集合。


.. _`difference_update()`:

difference_update() 方法
=============================

difference_update() 方法用于移除两个集合中都存在的元素。

difference_update() 方法与 difference() 方法的区别在于 difference() 方法返回一个移除相同元素的新集合，而 difference_update() 方法是直接在原来的集合中移除元素，没有返回值。

语法
--------------

::

    set.difference_update(set)

参数
-----------

* set -- 必需，用于计算差集的集合

返回值
----------

* 无。

.. _`discard()`:

discard() 方法
====================

discard() 方法用于移除指定的集合元素。

该方法不同于 remove() 方法，因为 remove() 方法在移除一个不存在的元素时会发生错误，而 discard() 方法不会。

语法
---------

::

    set.discard(value)

参数
---------

* value - 必需，要移除的元素

返回值
---------

无。

.. _`intersection()`:

intersection() 方法
======================

intersection() 方法用于返回两个或更多集合中都包含的元素，即交集。

语法
---------

::

    set.intersection(set1, set2 ... etc)

参数
--------

* set1 - 必需，要查找相同元素的集合
* set2 - 可选，其他要查找相同元素的集合，可以多个，多个使用逗号 , 隔开

返回值
--------

返回一个新的集合。

.. _`intersection_update()`:

intersection_update() 方法
==============================

intersection_update() 方法用于移除两个或更多集合中都不重叠的元素，即计算交集。

intersection_update() 方法不同于 intersection() 方法，因为 intersection() 方法是返回一个新的集合，而 intersection_update() 方法是在原始的集合上移除不重叠的元素。

语法
---------

::

    set.intersection_update(set1, set2 ... etc)

参数
---------

* set1 -- 必需，要查找相同元素的集合
* set2 -- 可选，其他要查找相同元素的集合，可以多个，多个使用逗号 , 隔开

返回值
---------

无。

.. _`isdisjoint()`:

isdisjoint() 方法
=====================

isdisjoint() 方法用于判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。。

语法
---------

::

    set.isdisjoint(set)

参数
---------

* set - 必需，要比较的集合

返回值
---------

返回布尔值，如果不包含返回 True，否则返回 False。

.. _`issubset()`:

issubset() 方法
==================

issubset() 方法用于判断集合的所有元素是否都包含在指定集合中，如果是则返回 True，否则返回 False。

语法
------

::

    set.issubset(set)

参数
------

* set - 必需，要比查找的集合

返回值
-------

返回布尔值，如果都包含返回 True，否则返回 False。

.. _`issuperset()`:

issuperset() 方法
===================

issuperset() 方法用于判断指定集合的所有元素是否都包含在原始的集合中，如果是则返回 True，否则返回 False。

语法
----------

::

    set.issuperset(set)

参数
--------

* set -- 必需，要比查找的集合

返回值
--------

返回布尔值，如果都包含返回 True，否则返回 False。

.. _`pop()`:

pop() 方法
===============

pop() 方法用于随机移除一个元素。

语法
------------

::

    set.pop()

参数
--------

* 无

返回值
---------

返回移除的元素。

.. _`remove()`:

remove() 方法
=================

remove() 方法用于移除集合中的指定元素。

该方法不同于 discard() 方法，因为 remove() 方法在移除一个不存在的元素时会发生错误，而 discard() 方法不会。

语法
-------------

::

    set.remove(item)

参数
-----------

* item - 要移除的元素

返回值
-----------

返回移除的元素。

.. _`symmetric_difference()`:

symmetric_difference() 方法
=============================

symmetric_difference() 方法返回两个集合中不重复的元素集合，即会移除两个集合中都存在的元素。

语法
------------

::

    set.symmetric_difference(set)

参数
-------------

* set -- 集合

返回值
-------------

返回一个新的集合。

.. _`symmetric_difference_update()`:

symmetric_difference_update() 方法
=====================================

symmetric_difference_update() 方法移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。

语法
---------

::

    set.symmetric_difference_update(set)

参数
----------

* set -- 要检测的集合

返回值
----------

无。

.. _`union()`:

union() 方法
=================

union() 方法返回两个集合的并集，即包含了所有集合的元素，重复的元素只会出现一次。

语法
-----------

::

    set.union(set1, set2...)

参数
---------

* set1 - 必需，合并的目标集合
* set2 - 可选，其他要合并的集合，可以多个，多个使用逗号 , 隔开。

返回值
--------

返回一个新集合。

.. _`update()`:

update() 方法
================

update() 方法用于修改当前集合，可以添加新的元素或集合到当前集合中，如果添加的元素在集合中已存在，则该元素只会出现一次，重复的会忽略。

语法
--------------

::

    set.update(set)

参数
----------

* set -- 必需，可以是元素或集合

返回值
----------

* 无。
