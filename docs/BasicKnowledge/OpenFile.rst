open() 方法
################################

Python open() 方法用于打开一个文件，并返回文件对象，在对文件进行处理过程都需要使用到这个函数，如果该文件无法被打开，会抛出 OSError。

注意：使用 open() 方法一定要保证关闭文件对象，即调用 close() 方法。

open() 函数常用形式是接收两个参数：文件名（file）和模式（mode）。

.. highlight:: none

::

    open(file, mode='r')

完整的语法格式为：

::

    open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)

参数说明:

* file: 必选，文件路径 + 文件名（相对或者绝对路径）
* mode: 文件打开的模式，可选（默认值是 r）
* buffering: 设置缓冲策略的可选整数，可选
* encoding: 文件的编码的格式。一般使用 UTF_8，可选
* errors: 指定处理编码和解码错误的方法。不能在二进制模式下使用，可选
* newline: 控制通用换行符模式的工作原理（仅适用于文本模式），可选

**mode 详细参数**

=====   ==========
模式	    描述
=====   ==========
'r'	      打开阅读（默认，只读）
'w'	      打开写入，如果文件存在则打开文件（原来文件中的内容会被覆盖），如果文件不存在，创建新文件。
'x'	      打开独占创建一个文件，如果文件已经存在则失败
'a'	      打开写入，将内容追加到文件末尾（如果文件存在）
'b'	      二进制模式，一般用于非文本文件如图片。
't'	      文本模式（默认）
'+'	      打开磁盘文件进行更新（读取和写入）
'U'	      通用换行符模式（已弃用）
=====   ==========

.. note::

    Python 不依赖于底层操作系统的文本文件的概念，所有的处理都是由 Python 本身完成的，因此所有操作与平台无关的。


file 对象
********************

file 对象使用 open 函数来创建，下表列出了 file 对象常用的函数：

============================   ================
方法                              描述
============================   ================
file.close()                     关闭文件。关闭后文件不能再进行读写操作。
file.flush()                     刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入。
file.fileno()                    返回一个整型的文件描述符（file descriptor FD 整型），可以用在如 os 模块的 read 方法等一些底层操作上。
file.isatty()                    如果文件连接到一个终端设备返回 True，否则返回 False。
file.read(size)                  从文件读取指定的字节数，如果未给定或为负则读取所有。
file.readline(size)              读取整行，包括 ``\n`` 字符。
file.readlines(sizeint)          读取所有行并返回列表，若给定 sizeint>0，返回总和大约为 sizeint 字节的行, 实际读取值可能比 sizeint 较大, 因为需要填充缓冲区。
file.seek(offset, whence)        设置文件当前位置。文件读取指针到开头 fo.seek(0, 0)
file.tell()                      返回文件当前位置。
file.truncate(size)              从文件的首行首字符开始截断，截断文件为 size 个字符，无 size 表示从当前位置截断；截断之后后面的所有字符被删除，其中 Widnows 系统下的换行代表2个字符大小。
file.write(str)                  将字符串写入文件，返回的是写入的字符长度。
file.writelines(sequence)        向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行符。
============================   ================


close() 方法
====================

close() 方法用于关闭一个已打开的文件。关闭后的文件不能再进行读写操作， 否则会触发 ValueError 错误。 close() 方法允许调用多次。

当 file 对象，被引用到操作另外一个文件时，Python 会自动关闭之前的 file 对象。 使用 close() 方法关闭文件是一个好的习惯。

语法
--------------

::

    fileObject.close()

参数
---------------

* 无

返回值
----------------

没有返回值。


flush() 方法
=====================

flush() 方法是用来刷新缓冲区的，即将缓冲区中的数据立刻写入文件，同时清空缓冲区，不需要是被动的等待输出缓冲区写入。

一般情况下，文件关闭后会自动刷新缓冲区，但有时你需要在关闭前刷新它，这时就可以使用 flush() 方法。

语法
-------------------

::

    fileObject.flush()

参数
-----------------

* 无

返回值
----------------

没有返回值。


fileno() 方法
================

fileno() 方法返回一个整型的文件描述符（file descriptor FD 整型），可用于底层操作系统的 I/O 操作。

语法
-------------------

::

    fileObject.fileno()

参数
------------------

* 无

返回值
------------------

返回文件描述符。


isatty() 方法
==================

isatty() 方法检测文件是否连接到一个终端设备。

语法
-------------

::

    fileObject.isatty()

参数
------------

* 无

返回值
------------

如果连接到一个终端设备返回 True，否则返回 False。


read() 方法
==============

read() 方法用于从文件读取指定的字节数，如果未给定或为负则读取所有。

语法

::

    fileObject.read()

参数
--------------

* size - 从文件中读取的字节数。

返回值
--------------

返回从字符串中读取的字节。


readline() 方法
====================

readline() 方法用于从文件读取整行，包括 ``\n`` 字符。如果指定了一个非负数的参数，则返回指定大小的字节数，包括 ``\n`` 字符。

语法
-------------------

::

    fileObject.readline()

参数
----------------

* size - 从文件中读取的字节数。

返回值
----------------

返回从字符串中读取的字节。


readlines() 方法
====================

readlines() 方法用于读取所有行（直到结束符 EOF）并返回列表。如果碰到结束符 EOF 则返回空字符串。

语法
--------------

::

    fileObject.readlines()

参数
--------------

* 无

返回值
--------------

返回列表，包含所有的行。


seek() 方法
=====================

seek() 方法用于移动文件读取指针到指定位置，开头位置为 fileObject.seek(0, 0)。

语法
--------------

::

    fileObject.seek(offset, whence)

参数
--------------

* offset - 开始的偏移量，也就是代表需要移动偏移的字节数。

* whence：可选，默认值为 0。给 offset 参数一个定义，表示要从哪个位置开始偏移；0 代表从文件开头开始算起，1 代表从当前位置开始算起，2 代表从文件末尾算起。

返回值
-----------

没有返回值。


tell() 方法
====================

tell() 方法返回文件的当前位置，即文件指针当前位置。

语法
-----------

::

    fileObject.tell()

参数
-----------

* 无

返回值
-----------

返回文件的当前位置。


truncate() 方法
====================

truncate() 方法用于从文件的首行首字符开始截断，截断文件为 size 个字符，无 size 表示从当前位置截断；
截断之后 V 后面的所有字符被删除，其中 Widnows 系统下的换行代表 2 个字符大小。

语法
----------------

::

    fileObject.truncate( size )

参数
----------------

* size - 可选，如果存在则文件截断为 size 字节。

返回值
---------------

没有返回值。


write() 方法
==================

write() 方法用于向文件中写入指定字符串。

在文件关闭前或缓冲区刷新前，字符串内容存储在缓冲区中，这时你在文件中是看不到写入的内容的。

如果文件打开模式带 b，那写入文件内容时，str（参数）要用 encode 方法转为 bytes 形式，否则报错（TypeError: a bytes-like object is required, not 'str'）。

语法
------------

::

    fileObject.write( str )

参数
------------

* str - 要写入文件的字符串。

返回值
-----------

返回写入的字符长度。


writelines() 方法

writelines() 方法用于向文件中写入一序列的字符串。

这一序列字符串可以是由迭代对象产生的，如一个字符串列表，换行需要添加换行符 ``\n``。

语法
---------------

::

    fileObject.writelines( [ str ])

参数
-----------------

* str - 要写入文件的字符串序列。

返回值
-----------------

没有返回值。
