字符串
#######################

字符串是 Python 中最常用的数据类型，几乎所有的 Python 程序中都有字符串的身影。字符串用途众多，但主要用途是表示一段文本，如感叹句“Hello, world!”。

字符串的基本操作
***********************

所有标准序列操作（索引、切片、乘法、成员资格检查、长度、最小值和最大值）都适用于字符串，但别忘了字符串是不可变的，因此所有的元素赋值和切片赋值都是非法的。

创建字符串
=======================

创建字符串很简单，只要为变量分配一个值即可（与数一样，字符串也是值），但是值需要用单引号或双引号将其括起。定义两种方式是更方便程序的编写，当一个字符串包含一个单引号，就不能用单引号将整个字符串括起（使用转移符除外），否则解释器将报错。就像下边这样：

.. highlight:: none

::

    >>> x = 'Hello, '
    >>> y = "world!"

    >>> string = 'Let's go!'
    File "<stdin>", line 1
    string = 'Let's go!'
                  ^
    SyntaxError: invalid syntax

还可以通过使用函数 str 和 repr 两种不同的机制将值转换成了字符串。使用 str 能以合理的方式将值转换为用户能够看懂的字符串。例如，尽可能将特殊字符编码转换为相应的字符。然而，使用 repr 时，通常会获得值的合法 Python 表达式表示。str 函数很常用，它可以把整数、浮点数等值转换成字符串，然后就可以进行字符串拼接等操作。

::

    >>> print(repr("Hello,\nworld!"))
    'Hello,\nworld!'
    >>> print(str("Hello,\nworld!"))
    Hello,
    world!

有一种独特的语法可用于表示包含换行符或转义符的字符串（长字符串和原始字符串）。要表示很长的字符串（跨越多行的字符串），可使用“三引号”，长字符串本身就可以包含单引号和双引号，无需使用转义符。

.. note::

    * Python 的代码块缩进规则不适用于多行字符串。
    * 多行字符串还可以用作多行注释。

::

    >>> print('''This is a very long string. It continues here.
    ... And it's not over yet. "Hello, world!"
    ... Still here.''')
    This is a very long string. It continues here.
    And it's not over yet. "Hello, world!"
    Still here.

原始字符串
-----------------------

原始字符串不以特殊方式处理反斜杠，因此在有些情况下很有用(如编写正则表达式时)。
在常规字符串中，反斜杠扮演着特殊角色：它对字符进行转义，让你能够在字符串中包含原本无法包含的字符。例如，可以使用 ``\n`` 表示换行符，从而像下面这样在字符串中包含换行符：

::

    >>> print('Hello,\nworld!')
    Hello,
    world!

这通常挺好，但在有些情况下，并非你想要的结果。如果你要在字符串中包含 ``\n`` 呢？例如，你可能要在字符串中包含DOS路径C:\nowhere。

::

    >>> path = 'C:\nowhere'
    >>> path
    'C:\nowhere'
    >>> print(path)
    C:
    owhere

这并非你想要的结果，那该怎么办呢？当然了可以对反斜杠本身进行转义。但对于很长的路径，将需要使用大量的反斜杠。

::

    >>> print('C:\\nowhere')
    C:\nowhere

    path = 'C:\\Program Files\\fnord\\foo\\bar\\baz\\frozz\\bozz'

在这样的情况下，原始字符串就会是很好的工具，因为它们根本不会对反斜杠做特殊处理，而是让字符串包含的每个字符都保持原样。就像下边这样，原始字符串用前缀 r 表示。看起来可在原始字符串中包含任何字符，这大致是正确的。一个例外是，引号需要像通常那样进行转义，但这意味着用于执行转义的反斜杠也将包含在最终的字符串中。

::

    >>> print(r'C:\nowhere')
    C:\nowhere
    >>> print(r'C:\Program Files\fnord\foo\bar\baz\frozz\bozz')
    C:\Program Files\fnord\foo\bar\baz\frozz\bozz

    >>> print(r'Let\'s go!')
    Let\'s go!

另外，原始字符串不能以单个反斜杠结尾。换而言之，原始字符串的最后一个字符不能是反斜杠，除非你对其进行转义（但进行转义时，用于转义的反斜杠也将是字符串的一部分）。根据前一个示例，这一点应该是显而易见的。如果最后一个字符（位于结束引号前面的那个字符）为反斜杠，且未对其进行转义，Python 将无法判断字符串是否到此结束。

::

    >>> print(r"This is illegal\")
    SyntaxError: EOL while scanning string literal

这合乎情理，但如果要指定以反斜杠结尾的原始字符串（如以反斜杠结尾的DOS路径），该如何办呢？本节介绍了大量技巧，应该能够帮助你解决这个问题，但基本技巧是将反斜杠单独作为一个字符串，下面是一个简单的示例：

::

    >>> print(r'C:\Program Files\foo\bar' '\\')
    C:\Program Files\foo\bar\

请注意，指定原始字符串时，可使用单引号或双引号将其括起，还可使用三引号将其括起。


转义字符
=======================

需要在字符中使用特殊字符时，python 用反斜杠 ``\`` 转义字符。如下表：

===========   ============
转义字符         描述
===========   ============
\\ 在行尾时       续行符
\\ \\            反斜杠符号
\\'              单引号
\\"              双引号
\\a 	           响铃
\\b 	           退格（Backspace）
\\e 	           转义
\\000 	         空
\\n 	           换行
\\v 	           纵向制表符
\\t 	           横向制表符
\\r 	           回车
\\f 	           换页
\\oyy 	         八进制数，yy代表的字符，例如：\o12代表换行
\\xyy 	         十六进制数，yy代表的字符，例如：\x0a代表换行
\\other 	       其它的字符以普通格式输出
===========   ============

设置字符串的格式
=======================

将值转换为字符串并设置其格式是一个重要的操作，需要考虑众多不同的需求，随着时间的流逝 Python 提供了多种字符串格式设置方法。以前，主要的解决方案是使用字符串格式设置运算符--百分号。字符串中的 ``%s`` 称为转换说明符，指出了要将值插入什么地方，s 意味着将值视为字符串进行格式设置。

::

    >>> format = "Hello, %s. %s enough for ya?"
    >>> format % ('world', 'Hot')
    'Hello, world. Hot enough for ya?'

编写新代码时，应选择使用字符串方法 format，它融合并强化了早期方法的优点。使用这种方法时，每个替换字段都用花括号括起，其中可能包含名称，还可能包含有关如何对相应的值进行转换和格式设置的信息。

在最简单的情况下，替换字段没有名称或将索引用作名称。

::

    >>> "{}, {} and {}".format("first", "second", "third")
    'first, second and third'
    >>> "{0}, {1} and {2}".format("first", "second", "third")
    'first, second and third'

然而，索引和命名字段则无需像上面这样按顺序排列。

::

    >>> "{3} {0} {2} {1} {3} {0}".format("be", "not", "or", "to")
    'to be or not to be'

    >>> from math import pi
    >>> "{name} is approximately {value:.2f}.".format(value=pi, name="π")
    'π is approximately 3.14.'


字符串方法
***********************

字符串的方法有很多，因为其很多方法都是从模块 string 那里“继承”而来的。

虽然字符串方法完全盖住了模块 string 的风头，但这个模块包含一些字符串没有的常量和函数。下面就是模块string 中几个很有用的常量。

* string.digits：包含数字 0～9 的字符串。
* string.ascii_letters：包含所有 ASCII 字母（大写和小写）的字符串。
* string.ascii_lowercase：包含所有小写 ASCII 字母的字符串。
* string.printable：包含所有可打印的 ASCII 字符的字符串。
* string.punctuation：包含所有 ASCII 标点字符的字符串。
* string.ascii_uppercase：包含所有大写 ASCII 字母的字符串。

虽然说的是 ASCII 字符，但值实际上是未解码的 Unicode 字符串。

center
=======================

方法 center 通过在两边添加填充字符（默认为空格）让字符串居中。

::

    >>> "The Middle by Jimmy Eat World".center(39)
    '     The Middle by Jimmy Eat World     '
    >>> "The Middle by Jimmy Eat World".center(39, "*")
    '*****The Middle by Jimmy Eat World*****'

另见：ljust 、rjust 和zfill 。

find
=======================

方法　find 在字符串中查找子串。如果找到，就返回子串的第一个字符的索引，否则返回　-1 。

::

    >>> 'With a moo-moo here, and a moo-moo there'.find('moo')
    7
    >>> title = "Monty Python's Flying Circus"
    >>> title.find('Monty')
    0
    >>> title.find('Python')
    6
    >>> title.find('Flying')
    15
    >>> title.find('Zirquss')
    -1

字符串方法 find 返回的并非布尔值。如果 find 像这样返回 0，就意味着它在索引 0 处找到了指定的子串。

你还可指定搜索的起点和终点（它们都是可选的）。

::

    >>> subject = '$$$ Get rich now!!! $$$'
    >>> subject.find('$$$')
    0

    # 只指定了起点
    >>> subject.find('$$$', 1)
    20
    >>> subject.find('!!!')
    16

    # 同时指定了起点和终点
    >>> subject.find('!!!', 0, 16)
    -1

请注意，起点和终点值（第二个和第三个参数）指定的搜索范围包含起点，但不包含终点。这是Python惯常的做法。

另见：rfind 、index 、rindex 、count 、startswith 、endswith 。

join
=======================

join 是一个非常重要的字符串方法，其作用与 split 相反，用于合并序列的元素。

::

    >>> seq = [1, 2, 3, 4, 5]
    >>> sep = '+'

    # 尝试合并一个数字列表
    >>> sep.join(seq)
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    TypeError: sequence item 0: expected string, int found
    >>> seq = ['1', '2', '3', '4', '5']

    # 合并一个字符串列表
    >>> sep.join(seq)
    '1+2+3+4+5'
    >>> dirs = '', 'usr', 'bin', 'env'
    >>> ''.join(dirs)
    '

    usr/bin/env'
    >>> print('C:' + '\\'.join(dirs))
    C:\usr\bin\env

如你所见，所合并序列的元素必须都是字符串。注意到在最后两个示例中，我使用了一系列目录，并按 UNIX 和 DOS/Windows 的约定设置其格式：通过使用不同的分隔符（并在 DOS 版本中添加了盘符）。

lower
=======================

方法 lower 返回字符串的小写版本。在编程时，比如需要判定一个用户名是否在数据库中（用户名不区分字符串的大小写），则可以把用户名和数据库中的名字都转化成小写，在使用　in 判断。

::

    >>> 'Trondheim Hammer Dance'.lower()
    'trondheim hammer dance'

    >>> name = 'Gumby'
    >>> names = ['gumby', 'smith', 'jones']
    >>> if name.lower() in names:
    ...　　print('Found it!')
    Found it!
    >>>

另见：islower 、istitle 、isupper 、translate 。

另见：capitalize 、casefold 、swapcase 、title 、upper 。

title
-----------------------

一个与　lower 相关的方法是　title。它将字符串转换为词首大写，即所有单词的首字母都大写，其他字母都小写。然而，它确定单词边界的方式可能导致结果不合理。

::

    >>> "that's all folks".title()
    "That'S All, Folks"

另一种方法是使用模块 string 中的函数 capwords 。

::

    >>> import string
    >>> string.capwords("that's all, folks")
    That's All, Folks"

当然，要实现真正的词首大写（根据你采用的写作风格，冠词、并列连词以及不超过5个字母的介词等可能全部小写），你得自己编写代码。

replace
=======================

方法 replace 将指定子串都替换为另一个字符串，并返回替换后的结果。如果你使用过字处理程序的“查找并替换”功能，一定知道这个方法很有用。

::

    >>> 'This is a test'.replace('is', 'eez')
    'Theez eez a test'

另见：translate、expandtabs。

split
=======================

split 是一个非常重要的字符串方法，其作用与 join 相反，用于将字符串拆分为序列。注意，如果没有指定分隔符，将默认在单个或多个连续的空白字符（空格、制表符、换行符等）处进行拆分。

::

    >>> '1+2+3+4+5'.split('+')
    ['1', '2', '3', '4', '5']
    >>> 'usr

    bin/env'.split('/')
    ['', 'usr', 'bin', 'env']
    >>> 'Using the default'.split()
    ['Using', 'the', 'default']

另见：join。

另见：partition 、rpartition 、rsplit 、splitlines。

strip
=======================

方法 strip 将字符串开头和末尾的空白（但不包括中间的空白）删除，并返回删除后的结果。

::

    >>> '    internal whitespace is kept    '.strip()
    'internal whitespace is kept'

与 lower 一样，需要将输入与存储的值进行比较时，strip 很有用。回到前面介绍 lower 时使用的用户名示例，并假定用户输入用户名时不小心在末尾加上了一个空格。

::

    >>> names = ['gumby', 'smith', 'jones']
    >>> name = 'gumby '
    >>> if name in names: print('Found it!')
    ...
    >>> if name.strip() in names: print('Found it!')
    ...
    Found it!
    >>>

你还可在一个字符串参数中指定要删除哪些字符。这个方法只删除开头或末尾的指定字符，因此中间的星号未被删除。

::

    >>> '*** SPAM  for

     everyone!!! ***'.strip(' *!')
    'SPAM  for

     everyone'

另见：lstrip 、rstrip。

translate
=======================

方法 translate 与 replace 一样替换字符串的特定部分，但不同的是它只能进行单字符替换。这个方法的优势在于能够同时替换多个字符，因此效率比 replace 高。

这个方法的用途很多（如替换换行符或其他随平台而异的特殊字符），但这里只介绍一个比较简单（也有点傻）的示例。假设你要将一段英语文本转换为带有德国口音的版本，为此必须将字符 c 和 s 分别替换为 k 和 z。

然而，使用 translate 前必须创建一个转换表 。这个转换表指出了不同 Unicode 码点之间的转换关系。要创建转换表，可对字符串类型 str 调用方法 maketrans，这个方法接受两个参数：两个长度相同的字符串，它们指定要将第一个字符串中的每个字符都替换为第二个字符串中的相应字符。就这个简单的示例而言，代码类似于下面这样：

::

    >>> table = str.maketrans('cs', 'kz')

如果愿意，可查看转换表的内容，但你看到的只是 Unicode 码点之间的映射。

::

    >>> table
    {115: 122, 99: 107}

创建转换表后，就可将其用作方法 translate 的参数。

::

    >>> 'this is an incredible test'.translate(table)
    'thiz iz an inkredible tezt'

调用方法 maketrans 时，还可提供可选的第三个参数，指定要将哪些字母删除。例如，要模仿语速极快的德国口音，可将所有的空格都删除。

::

    >>> table = str.maketrans('cs', 'kz', ' ')
    >>> 'this is an incredible test'.translate(table)
    'thizizaninkredibletezt'

另见：replace 、lower 。

判断字符串是否满足特定的条件
================================

很多字符串方法都以 is 打头，如 isspace、isdigit 和 isupper，它们判断字符串是否具有特定的性质（如包含的字符全为空白、数字或大写）。如果字符串具备特定的性质，这些方法就返回 True，否则返回 False 。

另见：isalnum 、isalpha 、isdecimal 、isdigit 、isidentifier 、islower 、isnumeric 、isprintable 、isspace 、istitle 、isupper。
