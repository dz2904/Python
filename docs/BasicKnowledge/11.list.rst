列表
#######################

列表是 Python 中最基本的数据结构。因为列表是可变的，你可以修改、添加或删除列表内容，所以列表有很多特有的方法。（并非所有列表方法都会修改列表。）

列表的基本操作
***********************

创建列表
=======================

要用方括号把列表值括起来，并用逗号分隔各个列表值，就会新建一个列表。列表值可以是不同类型的值，甚至可以包含其他序列。如下所示：

.. highlight:: none

::

    list1 = ['Google', 'Runoob', 1997, 2000]
    list2 = ['Google', 'Runoob', [1997, 2000]]
    list3 = []

函数 list 可以把任何序列转换为列表。

::

    >>> list('Hello')
    ['H', 'e', 'l', 'l', 'o']

    # 以下函数可以将列表转换为字符串
    ''.join(somelist)

    >>> tuple1 = (1,2,3,4,5,6,7,8,9)
    >>> list(tuple1)
    [1, 2, 3, 4, 5, 6, 7, 8, 9]

更新列表
=======================

::

    >>> x = [1, 1, 1]
    >>> x[1] = 2
    >>> x
    [1, 2, 1]
    >>> x[100] = 2
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    IndexError: list assignment index out of range

不能给不存在的元素赋值，因此如果列表的长度为 2，就不能给索引为 100 的元素赋值。

删除列表元素
=======================

可以使用 del 语句来删除列表的的元素。除用于删除列表元素外，del 语句还可用于删除变量或字典。

::

    >>> names = ['Alice', 'Beth', 'Cecil', 'Dee-Dee', 'Earl']
    >>> del names[2]
    >>> names
    ['Alice', 'Beth', 'Dee-Dee', 'Earl']

注意：我们会在接下来的章节讨论 remove() 方法的使用

给切片赋值
=======================

切片是一项极其强大的功能，而能够给切片赋值让这项功能显得更加强大。你可同时给多个元素赋值，通过使用切片赋值，可将切片替换为长度与其不同的序列。

::

    >>> name = list('Perl')
    >>> name
    ['P', 'e', 'r', 'l']
    >>> name[2:] = list('ar')
    >>> name
    ['P', 'e', 'a', 'r']

    >>> name[1:] = list('ython')
    >>> name
    ['P', 'y', 't', 'h', 'o', 'n']

    # 给一个空切片赋值，相当于插入了一个序列。
    >>> name[1:1] = [1, 2, 3]
    >>> name
    ['P', 1, 2, 3, 'y', 't', 'h', 'o', 'n']

    # 将一个切片赋值为空列表，来删除切片。
    >>> name
    ['P', 1, 2, 3, 'y', 't', 'h', 'o', 'n']
    >>> name[1:6] = []
    >>> name
    ['P', 'h', 'o', 'n']

嵌套列表
=======================

::

    >>> one = ['a', 'b', 'c']
    >>> two = [1, 2, 3]
    >>> x = [one, two]
    >>> x
    [['a', 'b', 'c'], [1, 2, 3]]
    >>> x[0]
    ['a', 'b', 'c']
    >>> x[0][1]
    'b'

列表方法
***********************

方法是与对象（列表、数、字符串等）联系紧密的函数。方法调用与函数调用很像，只是在方法名前加上了对象和句点。列表包含多个可用来查看或修改其内容的方法:

============================   ===========
序号                               方法
============================   ===========
`list.append(obj)`_               在列表末尾添加新的对象
`list.clear()`_                   清空列表
`list.copy()`_                    复制列表
`list.count(obj)`_                统计某个元素在列表中出现的次数
`list.extend(seq)`_               在列表末尾一次性追加另一个序列中的多个值（就地修改列表）
`list.index(obj)`_                从列表中查找指定值第一次出现的索引
`list.insert(index, obj)`_        将对象插入列表
`list.pop()`_                     移除列表中的一个元素（默认最后一个），并且返回该元素
`list.remove(obj)`_               移除列表中某个值的第一个匹配项
`list.reverse()`_                 按相反的顺序排列列表中的元素
`list.sort()`_                    对列表就地排序
============================   ===========

.. _`list.append(obj)`:

append 方法
=======================

append() 用于在列表末尾添加新的对象。与其他几个类似的方法一样，append 也就地修改列表。这意味着它不会返回修改后的新列表，而是直接修改旧列表。

::

    >>> lst = [1, 2, 3]
    >>> lst.append(4)
    >>> lst
    [1, 2, 3, 4]

.. _`list.clear()`:

clear 方法
=======================

clear() 用于清空列表，类似于 ``del lst[:]`` 或 ``lst[:] = []`` 。

::

    >>> lst = [1, 2, 3]
    >>> lst.clear()
    >>> lst
    []

.. _`list.copy()`:

copy 方法
=======================

copy() 用于复制列表，类似于使用 ``a[:]`` 或 ``list(a)`` ，它们也都复制 a。

::

    >>> a = [1, 2, 3]
    >>> b = a.copy()
    >>> b[1] = 4
    >>> b
    [1, 4, 3]
    >>> a
    [1, 2, 3]

.. _`list.count(obj)`:

count 方法
=======================

count() 用于统计某个元素在列表中出现的次数。

::

    >>> ['to', 'be', 'or', 'not', 'to', 'be'].count('to')
    2
    >>> x = [[1, 2], 1, 1, [2, 1, [1, 2]]]
    >>> x.count(1)
    2
    >>> x.count([1, 2])
    1

.. _`list.extend(seq)`:

extend 方法
=======================

extend() 用于在列表末尾一次性追加另一个序列中的多个值。换而言之，你可使用一个列表来扩展另一个列表。这看起来类似于拼接，但存在一个重要差别，那就是 extend() 将就地修改原来的列表。

::

    >>> a = [1, 2, 3]
    >>> b = [4, 5, 6]
    >>> a.extend(b)
    >>> a
    [1, 2, 3, 4, 5, 6]

.. _`list.index(obj)`:

index 方法
=======================

index() 用于从列表中找出某个值第一个匹配项的索引位置。

::

    >>> knights = ['We', 'are', 'the', 'knights', 'who', 'say', 'ni']
    >>> knights.index('who')
    4
    >>> knights.index('herring')
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    ValueError: 'herring' is not in list

.. _`list.insert(index, obj)`:

insert 方法
=======================

insert() 用于将指定对象插入列表的指定位置。

::

    >>> numbers = [1, 2, 3, 5, 6, 7]
    >>> numbers.insert(3, 'four')
    >>> numbers
    [1, 2, 3, 'four', 5, 6, 7]

.. _`list.pop()`:

pop 方法
=======================

pop() 用于移除列表中的一个元素（默认最后一个元素），并返回这一元素。pop() 是唯一既修改列表又返回一个非 None 值的列表方法。

::

    >>> x = [1, 2, 3, 4, 5, 6]
    >>> x.pop()
    6
    >>> x
    [1, 2, 3, 4, 5]
    >>> x.pop(0)
    1
    >>> x
    [2, 3, 4, 5]

.. _`list.remove(obj)`:

remove 方法
=======================

remove() 用于移除列表中某个值的第一个匹配项，它无法删除列表中其它位置的指定值。remove() 是就地修改且不返回值的方法，不同于 pop()，它修改列表，但不返回任何值。

::

    >>> x = ['to', 'be', 'or', 'not', 'to', 'be']
    >>> x.remove('be')
    >>> x
    ['to', 'or', 'not', 'to', 'be']
    >>> x.remove('bee')
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    ValueError: list.remove(x): x not in list

.. _`list.reverse()`:

reverse 方法
=======================

reverse() 用于按相反的顺序排列列表中的元素，reverse 就地修改列表，但不返回任何值。

::

    >>> x = [1, 2, 3]
    >>> x.reverse()
    >>> x
    [3, 2, 1]

.. _`list.sort()`:

sort 方法
=======================

sort() 用于对列表就地排序。

方法 sort 接受多个可选参数：key 和 reverse。这两个参数通常是按名称指定的，称为关键字参数。参数 key 类似于参数 cmp：你将其设置为一个用于排序的函数。然而，不会直接使用这个函数来判断一个元素是否比另一个元素小，而是使用它来为每个元素创建一个键，再根据这些键对元素进行排序。因此，要根据长度对元素进行排序，可将参数 key 设置为函数 len。对于另一个关键字参数 reverse，只需将其指定为一个真值，以指出是否要按相反的顺序对列表进行排序。

::

    >>> x = [4, 6, 2, 1, 7, 9]
    >>> x.sort()
    >>> x
    [1, 2, 4, 6, 7, 9]

    >>> x = ['aardvark', 'abalone', 'acme', 'add', 'aerate']
    >>> x.sort(key=len)
    >>> x
    ['add', 'acme', 'aerate', 'abalone', 'aardvark']

    >>> x = [4, 6, 2, 1, 7, 9]
    >>> x.sort(reverse=True)
    >>> x
    [9, 7, 6, 4, 2, 1]

列表的浅复制和深复制
***********************

在程序进行 a = b 这样的赋值时，会创建一个对 b 的新引用。对于像数字和字符串这样的不可变对象，这种赋值实际上创建了 b 的一个副本。然而，对可变对象（如列表和字典）来说，这样赋值的效果大不一样，例如：

::

    >>> a = [1,2,3,4]
    >>> b = a          # b 是对 a 的引用
    >>> b is a
    True
    >>> b[2] = -100    # 修改 b 中的一个元素
    >>> a              # 注意 a 也已经改变
    [1, 2, -100, 4]
    >>>

因为在这个例子中，a 和 b 引用的是同一个对象，修改其中任意一个变量都会影响到另一个。为了避免这种情况，必须创建对象的副本而不是创建新引用。

对于像列表和字典这样的容器对象，可以使用两种复制操作：浅复制和深复制。**浅复制** 将创建一个新对象，但它包含的是原始对象中包含的项的引用，例如：

::

    >>> a = [ 1, 2, [3,4] ]
    >>> b = list(a)        # 创建 a 的一个浅复制
    >>> b is a
    False
    >>> b.append(100)      # 给 b 追加一个元素
    >>> b
    [1, 2, [3, 4], 100]
    >>> a                 # 注意 a 没有变化
    [1, 2, [3, 4]]
    >>> b[2][0] = -100    # 修改 b 中的一个元素
    >>> b
    [1, 2, [-100, 4], 100]
    >>> a                 # 注意 a 中的变化
    [1, 2, [-100, 4]]
    >>>

在这个例子中，a 和 b 是单独的列表对象，但它们包含的元素是共享的。因此，修改 a 的一个元素也会修改 b 中的对应元素。

**深复制** 将创建一个新对象，并且递归地复制它包含的所有对象。Python 中没有内置操作可创建对象的深复制，但可以使用标准库中的 copy.deepcopy() 函数完成该工作，如下例所示：

::

    >>> import copy
    >>> a = [1, 2, [3, 4]]
    >>> b = copy.deepcopy(a)
    >>> b[2][0] = -100
    >>> b
    [1, 2, [-100, 4]]
    >>> a              # 注意 a 没有变化
    [1, 2, [3, 4]]
    >>>
