列表
################################

列表是 Python 中最基本的数据结构。序列中的每个元素都会分配一个数字（索引号），第一个索引是 0，第二个索引是 1，依此类推。

Python 有 6 个内置的序列类型，但最常见的是列表和元组。
序列都可以进行的操作包括 **索引、切片、加、乘、检查成员**。

列表的基本操作
*********************************

创建列表
==============

要用方括号把列表值括起来，就会新建一个列表。列表值可以是不同类型的值，甚至可以包含列表。如下所示：

.. highlight:: none

::

    list1 = ['Google', 'Runoob', 1997, 2000]

访问列表中的值
=================

列表索引从 0 开始。列表可以进行截取、组合等。

使用下标索引来访问列表中的值，同样也可以使用切片的形式截取字符，如下所示：

::

    >>> list1 = ['Google', 'Runoob', 1997, 2000]
    >>> list2 = [1, 2, 3, 4, 5, 6, 7 ]

    # 从前到后取值
    >>> print ("list1[0]: ", list1[0])
    list1[0]:  Google

    # 从后到前取值
    >>> print ("list1[-1]: ", list1[-1])
    2000

    # 切片取值
    >>> print ("list2[1:5]: ", list2[1:5])
    list2[1:5]: [2, 3, 4, 5]

    >>> print ("list2[3:]: ", list2[3:])
    list2[3:]: [4, 5, 6, 7]


更新列表
=====================

列表中的数据可以修改或更新，也可以使用添加列表项，如下所示：

::

    >>> list = ['Google', 'Runoob', 1997, 2000]

    >>> print ("第三个元素为 : ", list[2])
    第三个元素为 :  1997

    # 修改第三个元素的值
    >>> list[2] = 2001

    >>> print ("更新后的第三个元素为 : ", list[2])
    更新后的第三个元素为 :  2001


删除列表元素
=======================

可以使用 del 语句来删除列表的的元素，如下实例：

::

    >>> list = ['Google', 'Runoob', 1997, 2000]

    >>> print ("原始列表 : ", list)
    原始列表 :  ['Google', 'Runoob', 1997, 2000]

    # 删除列表的第三个元素
    >>> del list[2]

    >>> print ("删除第三个元素 : ", list)
    删除第三个元素 :  ['Google', 'Runoob', 2000]

注意：我们会在接下来的章节讨论 remove() 方法的使用


Python 列表操作符
=====================

列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。如下所示：

::

    >>> [1, 2, 3] + [4, 5, 6]
    [1, 2, 3, 4, 5, 6]

    >>> ['Hi!'] * 4
    ['Hi!', 'Hi!', 'Hi!', 'Hi!']

Python 列表拼接与嵌套
======================

Python 的列表支持拼接与嵌套操作，如下所示：

::

    # 拼接列表
    >>> squares = [1, 4, 9, 16, 25]
    >>> squares += [36, 49, 64, 81, 100]
    >>> squares
    [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]


    # 嵌套列表
    >>> a = ['a', 'b', 'c']
    >>> n = [1, 2, 3]
    >>> x = [a, n]
    >>> x
    [['a', 'b', 'c'], [1, 2, 3]]
    >>> x[0]
    ['a', 'b', 'c']
    >>> x[0][1]
    'b'



列表的函数 & 方法
************************

列表包含以下函数:

============   ===========
函数              说明
============   ===========
len(list)        列表元素个数
max(list)        返回列表元素最大值
min(list)        返回列表元素最小值
list(seq)        将元组转换为列表
============   ===========


列表包含以下方法:

==========================   ===========
序号                           方法
==========================   ===========
list.append(obj)               在列表末尾添加新的对象
list.count(obj)                统计某个元素在列表中出现的次数
list.extend(seq)               在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）
list.index(obj)                从列表中找出某个值第一个匹配项的索引位置
list.insert(index, obj)        将对象插入列表
list.pop()                     移除列表中的一个元素（默认最后一个元素），并且返回该元素的值
list.remove(obj)               移除列表中某个值的第一个匹配项
list.reverse()                 反向列表中元素
list.sort()                    对原列表进行排序
list.clear()                   清空列表
list.copy()                    复制列表
==========================   ===========


len() 函数
=================

len() 函数返回列表元素个数。

语法
----------------
::

    len(list)

参数
----------------

* list - 要计算元素个数的列表。

返回值
------------

返回列表元素个数。


max() 函数
======================

max() 函数返回列表元素中的最大值。

语法
---------------------

::

    max(list)

参数
--------------------

* list - 要返回最大值的列表。

返回值
----------------

返回列表元素中的最大值。


min() 函数
=====================

min() 函数返回列表元素中的最小值。

语法
-------------------

::

    min(list)

参数
--------------------


* list - 要返回最小值的列表。

返回值
----------------

返回列表元素中的最小值。


list() 函数
========================

list() 函数用于将元组或字符串转换为列表。

语法
------------------------

::

    list( seq )

参数
-------------------

* list - 要转换为列表的元组或字符串。

返回值
------------------

返回列表


append() 方法
======================

append() 方法用于在列表末尾添加新的对象。

语法
-------------------

::

    list.append(obj)

参数
-----------------

* obj - 添加到列表末尾的对象。

返回值
------------------

该方法无返回值，但是会修改原来的列表


count() 方法
===================

count() 方法用于统计某个元素在列表中出现的次数。

语法
-----------------

::

    list.count(obj)

参数
-------------

* obj - 列表中统计的对象。

返回值
------------

返回元素在列表中出现的次数


extend() 方法
================

extend() 用于在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）。

语法
------------

::

    list.extend(seq)

参数
-----------

* seq - 元素列表。

返回值
-----------

该方法没有返回值，但会在已存在的列表中添加新的列表内容。


index() 方法
====================

index() 用于从列表中找出某个值第一个匹配项的索引位置。

语法
-------------

::

    list.index(obj)

参数
-------------

* obj - 查找的对象。

返回值
-------------

该方法返回查找对象的索引位置，如果没有找到对象则抛出异常。


insert() 方法
===================

insert() 函数用于将指定对象插入列表的指定位置。

语法
-------------

::

    list.insert(index, obj)

参数
--------------

* index - 对象 obj 需要插入的索引位置。
* obj - 要插入列表中的对象。

返回值
--------------

该方法没有返回值，但会在列表指定位置插入对象。


pop() 方法
=================

pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。

语法
-----------------

::

    list.pop(index)

参数
--------------

* index - 可选参数，要移除列表元素的索引值，不能超过列表总长度，默认为 index=-1，删除最后一个列表值。

返回值
--------------

该方法返回从列表中移除的元素对象。


remove() 方法
======================

remove() 函数用于移除列表中某个值的第一个匹配项。

语法
---------------

::

    list.remove(obj)

参数
------------

* obj - 列表中要移除的对象。

返回值
-----------

该方法没有返回值但是会移除两种中的某个值的第一个匹配项。


reverse() 方法
===================

reverse() 函数用于反向列表中元素。

语法
-------------

::

    list.reverse()

参数
--------------

* NA

返回值
-----------

该方法没有返回值，但是会对列表的元素进行反向排序。

sort() 方法
=================

sort() 函数用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。

语法
-----------

::

    list.sort(cmp=None, key=None, reverse=False)

参数

* cmp - 可选参数, 如果指定了该参数会使用该参数的方法进行排序。
* key - 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。
* reverse - 排序规则，reverse = True 降序， reverse = False 升序（默认）。

返回值
---------------

该方法没有返回值，但是会对列表的对象进行排序。


clear() 方法
==================

clear() 函数用于清空列表，类似于 del a[:]。

语法
---------------

::

    list.clear()

参数
--------------

* 无

返回值
-------------

该方法没有返回值。


copy() 方法
=================

copy() 函数用于复制列表，类似于 a[:]。

语法
--------------

::

    list.copy()

参数
-------------

* 无

返回值
-------------

返回复制后的新列表。
