guizero 文档
################################

guizero 是标准 Tkinter 库的包装器，目标是让初学者更快速、轻松地创建 GUI 界面。使用 guizero 基本不需要 Tkinter 的知识，只需要基本的 Python 知识结构。如何安装 guizero 请参见 `PYPI`_。

.. _PYPI: https://pypi.org/project/guizero/

.. warning ::

    guizero 只适用于 Python3 环境，不支持 Python2.7。在使用 guizero 之前必须安装 Tkinter。


快速开始
*******************************

入门
===============================

从 guizero 库中选择您需要的小部件并导入它们：

.. highlight:: none

::

    from guizero import App, PushButton, Slider

Hello World
-------------------------------

所有 guizero 程序都以一个 ``App()`` 的主窗口开始，以 ``app.display()`` 结尾。

创建一个标题为“Hello world”的应用程序窗口：

::

    from guizero import App
    app = App(title="Hello world")
    app.display()

保存并运行上边的代码 - 您已经创建了第一个guizero应用程序！如下所示：

.. image:: ../images/guizero.01.jpg

添加小部件
-------------------------------

窗口小部件是显示在 GUI 上的内容，例如文本框、按钮、滑块、图片等。

所有的小部件都在主窗口 ``App()`` 和 ``app.display()`` 之间创建。

::

    from guizero import App, Text
    app = App(title="Hello world")
    message = Text(app, text="Welcome to the Hello world app!")
    app.display()

.. image:: ../images/guizero.02.jpg

让我们详细地看一下 Text 小部件的代码：

* message = Text 对象有一个名称，就像任何变量一样
* Text() 在屏幕上创建一段文本的对象
* app 文本对象的主窗口，即它将存在的位置。
* text="" 要显示的文本内容

要了解更多详细信息请查看 小部件_

命令
===============================

guizero 中的小部件可以在创建时给出命令。通过使用命令，可以在用户操作时执行特定命令。

以下程序，在按下按钮并松开时显示 hello world 文本内容：

::

    from guizero import App, Text, PushButton

    def say_hello():
        text.value = "hello world"

    app = App()
    text = Text(app)
    button = PushButton(app, command=say_hello)
    app.display()

.. image:: ../images/guizero.03.gif

页面布局
===============================

GUI 的布局就是如何在窗口中安排小部件。

可以有两种布局方式将小部件安排到“容器”（例如 ``App`` 和 ``Box`` ）中：

* auto 自动布局（默认值）
* grid 网格布局

使用容器的布局参数设置布局，例如：

::

    app = App(layout="auto")
    app = App(layout="grid")

如果未指定布局参数，则使用默认值。

自动布局
-------------------------------

auto 是创建容器时使用的默认值。所有小部件将按创建顺序上下排列并以中心对齐，例如以下代码将创建两个 Text 小部件，一个在另一个之上。

::

    from guizero import App, Text
    app = App()
    text_1 = Text(app, text="on top")
    text_2 = Text(app, text="below")
    app.display()

.. image:: ../images/guizero.04.jpg

对齐布局
-------------------------------

窗口小部件可以在创建时使用 ``align`` 属性来修改默认的对齐方式。

定义对齐小部件的值包括 ``top`` ``bottom`` ``left``  ``right`` ：

::

    from guizero import App, Text
    app = App()
    top_text = Text(app, text="at the top", align="top")
    bottom_text = Text(app, text="at the bottom", align="bottom")
    left_text = Text(app, text="to the left", align="left")
    right_text = Text(app, text="to the right", align="right")
    app.display()

.. image:: ../images/guizero.05.jpg

通过将多个小部件对齐到容器的同一侧，可以使小部件堆叠在一起，例如：

::

    from guizero import App, Text, TextBox, PushButton
    app = App()
    text = Text(app, text="label", align="left")
    text_box = TextBox(app, text="enter text", align="left")
    button = PushButton(app, text="submit", align="left")
    app.display()

.. image:: ../images/guizero.06.jpg

窗口小部件将按创建顺序堆叠，因此首先创建的窗口小部件将最接近指定方向的边缘。

填充
-------------------------------

通过设置要填充的宽度和高度参数，还可以使窗口小部件“填充”所有可用空间。

TextBox 可以跨越容器的整个宽度：

::

    from guizero import App, TextBox
    app = App()
    text_box = TextBox(app, text="enter text", width="fill")
    app.display()

.. image:: ../images/guizero.07.jpg

还可以将 ListBox 高度填充为 ``fill`` ，并且对齐方式为左对齐，例如：

::

    from guizero import App, ListBox
    app = App()
    list_box = ListBox(app, items=["a list"], height="fill", align="left")
    app.display()

.. image:: ../images/guizero.08.jpg

宽度和高度都设置成 ``fill`` 将使小部件占满所有可用空间，例如：

::

    from guizero import App, PushButton
    app = App()
    button = PushButton(app, width="fill", height="fill")
    app.display()

.. image:: ../images/guizero.09.jpg

当多个小部件使用填充时，窗口管理器（操作系统）将相应地在需要填充它的所有小部件之间分配空间。

::

    from guizero import App, ListBox, PushButton
    app = App()
    list_box = ListBox(app, items=["a list", "of items", "yay"], height="fill", align="left")
    button = PushButton(app, width="fill", height="fill", align="right")
    app.display()

.. image:: ../images/guizero.10.jpg

.. note ::

    使用填充并不总是具有您期望的效果，因为操作系统需要分配屏幕空间。


网格布局
===============================

网格布局允许您将小部件定位到虚拟网格中。

创建窗口小部件时，您需要传递一个名为 ``grid`` 的额外参数，该参数是一个包含 ``[x，y]`` 坐标的列表，用于显示窗口小部件的位置，如下所示：

::

    app = App(layout="grid")
    text = Text(app, text="Hello world", grid=[0,1])

无需指定所需网格的宽度或高度 - 它将根据您为每个窗口小部件提供的坐标进行扩展。但是，不包含对象的网格单元格将没有高度或宽度。

在创建希望窗口小部件排列的 GUI 时，这非常有用。例如：创建数字键盘。

::

    from guizero import App, PushButton

    app = App(layout="grid")

    button1 = PushButton(app, text="1", grid=[0,0])
    button2 = PushButton(app, text="2", grid=[1,0])
    button3  = PushButton(app, text="3", grid=[2,0])
    button4  = PushButton(app, text="4", grid=[0,1])
    button5  = PushButton(app, text="5", grid=[1,1])
    button6  = PushButton(app, text="6", grid=[2,1])
    button7  = PushButton(app, text="7", grid=[0,2])
    button8  = PushButton(app, text="8", grid=[1,2])
    button9  = PushButton(app, text="9", grid=[2,2])
    button0  = PushButton(app, text="0", grid=[1,3])

    app.display()

.. image:: ../images/guizero.11.jpg

您还可以在网格中对齐小部件，例如在创建表单时：

::

    from guizero import App, Text, TextBox

    app = App(layout="grid")

    name_label = Text(app, text="Name", grid=[0,0], align="left")
    name = TextBox(app, grid=[1,0])
    surname_label = Text(app, text="Surname", grid=[0,1], align="left")
    surname = TextBox(app, grid=[1,1])
    dob_label = Text(app, text="Date of Birth", grid=[0,2], align="left")
    dob = TextBox(app, grid=[1,2])

    app.display()

.. image:: ../images/guizero.12.jpg

跨越列或行
-------------------------------

通过在 grid 参数中指定 span，可以使小部件跨越多个列或行。这些是可选的，但是如果指定，则必须使用格式 ``[x,y,xspan,yspan]`` 来包含它们。

下面的示例显示位于 0,1 的文本小部件，跨越两列（x）和一行（y）：

::

    text = Text(app, text="Hello world", grid=[0,1,2,1])

这可以用于包括彼此并排布置的不同尺寸的小部件。

::

    from guizero import App, Picture

    app = App(layout="grid")

    picture1 = Picture(app, image="std1.gif", grid=[0,0])
    picture2 = Picture(app, image="std2.gif", grid=[1,0])
    picture3 = Picture(app, image="tall1.gif", grid=[2,0,1,2])
    picture4 = Picture(app, image="wide1.gif", grid=[0,1,2,1])

    app.display()

.. image:: ../images/guizero.13.png


盒子布局
===============================

通过使用 Box 小部件，您可以将 GUI 划分为不同的部分，从而允许您以任何方式布置用户界面。

::

    from guizero import App, Box, Text, TextBox
    app = App()

    title_box = Box(app, width="fill", align="top", border=True)
    Text(title_box, text="title")

    buttons_box = Box(app, width="fill", align="bottom", border=True)
    Text(buttons_box, text="buttons")

    options_box = Box(app, height="fill", align="right", border=True)
    Text(options_box, text="options")

    content_box = Box(app, align="top", width="fill", border=True)
    Text(content_box, grid=[0,0], text="content")

    form_box = Box(content_box, layout="grid", width="fill", align="left", border=True)
    Text(form_box, grid=[0,0], text="form")
    Text(form_box, grid=[0,1], text="label")
    TextBox(form_box, grid=[1,1], text="data", width="fill")

    app.display()

.. image:: ../images/guizero.14.jpg

如果你想在 GUI 的左上角创建一个标题，你可以使用一个填充应用程序顶部的 Box，并将一个 Text 小部件放在左边。

::

    from guizero import App, Box, Text
    app = App()

    title_box = Box(app, width="fill", align="top")
    title = Text(title_box, text="title", align="left")

    app.display()

.. image:: ../images/guizero.15.jpg

如果您的 Box 有边框，您可能会发现设计布局更容易，可以通过将 ``Box`` 上的 ``border`` 参数设置为 ``True`` 来完成。

::

    title_box = Box(app, width="fill", align="top", border=True)

.. image:: ../images/guizero.16.jpg

可以使用类似的方法在 GUI 的右下角放置“确定”和“取消”按钮。请记住，小部件将按创建顺序堆叠在右侧，因此首先创建取消按钮。

::

    from guizero import App, Box, PushButton
    app = App()

    buttons_box = Box(app, width="fill", align="bottom")
    cancel = PushButton(buttons_box, text="Cancel", align="right")
    ok = PushButton(buttons_box, text="OK", align="right")

    app.display()

.. image:: ../images/guizero.16.png

.. note ::

    Box 也可以包含在 Box 中，允许您分层框并定位窗口小部件。

在创建 GUI 时，最好首先在纸上设计出大体的位置，然后在动手。

弹窗
===============================

弹出窗口可用于通过提问或提供信息来提示用户操作。

使用弹窗之前，需要导入模块。例如：

::

    from guizero import warn, info

这些功能会在屏幕上弹出一个显示消息的框。可用的功能是：


* warn(title, text) - 带有警告图标的弹出框
* info(title, text) - 带有信息图标的弹出框
* error(title, text) - 带有错误图标的弹出框
* yesno(title, text) - 带有“是(Y)”和“否(N)”选项的弹出框。按“是(Y)”返回 ``True`` ，按“否(N)”返回 ``False`` 。

所有弹出框都使用本机显示，因此它们看起来会有所不同，具体取决于您的操作系统。


警告框
-------------------------------

这将弹出一个警告框，标题为 "Uh oh!" 和消息  "You are almost out of biscuits!" 。

::

    from guizero import App, warn
    app = App(title="Biscuit monitor")
    warn("Uh oh!", "You are almost out of biscuits!")
    app.display()

.. image:: ../images/guizero.17.jpg

``info`` 和 ``error`` 与警告框的工作方式完全相同，但会显示不同的图标。

带选项的弹出框
-------------------------------

调用此 yesno 函数时，它返回一个布尔值。可以将此值存储在变量中并对其进行测试：

::

    from guizero import App, yesno, info, error
    app = App(title="Snowman")
    build_a_snowman = yesno("A question...", "Do you want to build a snowman?")
    if build_a_snowman == True:
        info("Snowman", "It doesn't have to be a snowman")
    else:
        error("Snowman", "Okay bye...")
    app.display()

首先显示是/否选项框：

.. image:: ../images/guizero.18.jpg

如果按下是，将显示一个信息框：

.. image:: ../images/guizero.19.jpg

如果按下否，将显示错误框：

.. image:: ../images/guizero.20.jpg

示例：使用警报作为回调
-------------------------------

您还可以在回调中使用这些函数（当您必须为另一个要调用的小部件提供函数时）。下面是一个 PushButton 示例，按下时会弹出一个信息框。

::

    from guizero import App, PushButton, info
    app = App()
    button = PushButton(app, command=info, args=["Info", "You pressed the button"])
    app.display()

提供给 PushButton 的参数是：

* 应该创建按钮的位置（在 app 内）
* 按下时要调用的函数的名称（info）
* 要调用的函数的参数列表（info 函数的 title 和 message 参数的值）

.. image:: ../images/guizero.21.jpg

示例：你真的想要关闭吗？
-------------------------------

您可以使用 yesno 框来检查某人是否真的要退出应用。如果他们点击是，则关闭应用程序，否则，没有任何反应，他们可以继续他们正在做的事情。

::

    from guizero import App, Text, yesno

    # Ask the user if they really want to close the window
    def do_this_on_close():
        if yesno("Close", "Do you want to quit?"):
            app.destroy()

    app = App()

    title = Text(app, text="blank app")

    # When the user tries to close the window, run the function do_this_on_close()
    app.on_close(do_this_on_close)

    app.display()

.. image:: ../images/guizero.22.jpg


尺寸
===============================

您可以在guizero中设置小部件的宽度和高度。

窗口小部件会按像素或字符大小调整，具体取决于窗口小部件及其包含的内容。某些小部件也可以将高度或宽度设置为 ``fill`` ，它将占用所有可用空间。

::

    from guizero import App, PushButton, Slider, ListBox

    app = App()

    # a PushButton's size is noted in characters
    button = PushButton(app, width=30, height=5)

    # a Slider's size is noted in pixels
    slider = Slider(app, width=300, height=30)

    # some widgets, such as ListBox can also be told to fill all the available space
    listbox = ListBox(app, width="fill", height="fill")

    app.display()

.. image:: ../images/guizero.23.jpg

=============   ==========   ========   ========
小部件            字符/像素    fill       描述
=============   ==========   ========   ========
Box              像素         支持        如果 Box 的大小为像素，则必须指定宽度和高度。
ButtonGroup      字符         支持        单选框的高度必须除以其中的按钮数
CheckBox         字符         支持        复选框
Combo            字符         支持        下拉框
ListBox          字符         支持        列表框
Picture          像素         否          图片/图像
PushButton       字符         支持        按钮
PushButton       像素         否          带有图像的按钮大小以像素为单位
Slider           像素         支持        滑动框
Text             字符         支持        显示不可编辑的文本框
TextBox          字符         支持        显示用户可以键入的文本框
Waffle           像素         否          显示自定义尺寸和填充的 n*n 正方形网格
=============   ==========   ========   ========

颜色
===============================

您可以使用以下方法在 guizero 中设置颜色：

* 颜色的名称： ``white``
* RGB 十六进制值： ``#ffffff``
* RGB 值列表： ``(255,255,255)``

颜色可以用作起始参数，例如：

::

    app = App(bg = "red")
    app = App(bg = "#ff0000")
    app = App(bg = (255, 0, 0))

或作为属性，例如：

::

    text = Text(app, text = "hi")
    text.text_color = "green"
    text.text_color = "#00ff00"
    text.text_color = (0, 255, 0)

如果使用 rgb 值列表设置颜色（ ``(255,255,255)`` ），它将作为 #rgb 十六进制值返回（ ``#ffffff`` ）。

颜色名称
-------------------------------

颜色名称可以作为字符串给出，例如：


* white
* black
* red
* green
* blue
* yellow

图像
===============================

Picture 和 PushButton 等小部件允许您在 GUI 中使用图像。

::

    from guizero import App, Picture
    app = App()
    picture = Picture(app, image="test.gif")
    app.display()


支持的图像类型（GIF，JPG，PNG等）取决于您安装 guizero 的方式和计算机的设置。

支持的文件类型
-------------------------------

所有系统都支持 GIF 文件类型，如果安装了 PIL 库，支持显示动画 GIF，如果没有，GIF 将显示为静态图像。

guizero 将使用以下代码告诉您计算机支持哪些文件类型：

::

    from guizero import system_config
    print(system_config.supported_image_types)

==========   ============   ==================
操作系统       PIL 不可用      PIL 可用
==========   ============   ==================
Windows       GIF, PNG        GIF, 动画 GIF, BMP, ICO, PNG, JPG, TIF
MacOS         GIF             GIF, 动画 GIF, BMP, ICO, PNG, JPG, TIF
Linux         GIF, PNG        GIF, 动画 GIF, BMP, ICO, PNG, JPG, TIF
Raspbian      GIF, PNG        GIF, 动画 GIF, BMP, ICO, PNG, JPG, TIF
==========   ============   ==================

更改窗口小部件的大小时，图像将更改为适合窗口小部件。如果 PIL 可用，则图像将正确缩放，否则图像将被裁剪。


循环和睡眠
===============================

您可能习惯于编写包含循环或使用 sleep() 命令的程序，但是当您尝试将这些程序与 guizero 一起使用时，它们会导致 GUI 冻结。这是因为 guizero（与几乎所有 GUI 一样）操作事件驱动的编程模型，这可能与您熟悉的编程模型不同。

你的第一个 guizero 程序可能看起来像这样：

::

    from guizero import App
    app = App("Hello world")
    app.display()

代码行 app.display() 不仅显示应用程序 - 它进入一个无限的事件循环，它正在观察并等待 GUI 上发生的事件。事件包括用户点击按钮，移动滑块，键入文本框等内容。此行之后写的代码将不会执行，因为事件循环是无限的。

假设您希望 GUI 上的计数器每秒开始计数 1。你可能想写一个这样的程序：

::

    from guizero import App, Text
    from time import sleep

    app = App("Hello world")
    text = Text(app, text="1")
    while True:
        text.value = int(text.value) + 1
        sleep(1)
    app.display()

如果你运行这个程序，你会发现这没有达到预期的效果 - 你的程序崩溃了！这是因为您已通过两种方式阻止了 GUI 的更新：

1. sleep() 命令 - 当你的程序正在睡眠时，GUI 不会更新，你将无法点击任何东西。
2. while 循环 - 一旦你进入这个循环，你的 GUI 永远不会再次更新，可能会崩溃。

此行为不是 guizero 或 tkinter 中的错误。

您必须以与您可能习惯的方式不同的方式编写基于 GUI 的程序。如果你想重复执行一个动作，你会这样做：

1. 编写一个执行所需操作的函数（在此示例中为 ``counter()`` ）
2. 设置该函数的回调。您可以安排在给定的毫秒数后重复发生相同的回调（在此示例中为 1000），或者您只能安排一次。

::

    from guizero import App, Text

    # Action you would like to perform
    def counter():
        text.value = int(text.value) + 1

    app = App("Hello world")
    text = Text(app, text="1")
    text.repeat(1000, counter)  # Schedule call to counter() every 1000ms
    app.display()

事件
===============================

警告 - 事件目前是实验性的，可能会遇到问题，API 可能会发生变化。

当用户执行以下操作时，可以将自定义事件添加到 guizero 窗口小部件以调用函数：

* 点击时 - when_clicked
* 当按下鼠标左键时 - when_left_button_pressed
* 释放鼠标左键时 - when_left_button_released
* 按下鼠标右键时 - when_right_button_pressed
* 释放鼠标右键时 - when_right_button_released
* 按下某个键时 - when_key_pressed
* 当一个键被释放时 - when_key_released
* 当鼠标进入小部件时 - when_mouse_enters
* 当鼠标离开小部件时 - when_mouse_leaves
* 将鼠标拖过窗口小部件时 - when_mouse_dragged

通过将事件分配给函数来设置事件：

::

    def clicked():
        print("clicked")

    widget.when_clicked = clicked

事件数据
-------------------------------

被调用的函数也可以接受一个参数，并将传递有关发生的事件的数据。

返回的事件数据包括：

* widget - 引发事件的 guizero 小部件
* tk_event - tkinter 事件对象
* key - 引发事件的关键
* x - 事件发生时鼠标相对于窗口小部件的 x 位置
* y - 事件发生时鼠标相对于窗口小部件的 y 位置
* display_x - 事件发生时鼠标在显示屏上的 x 位置
* display_y - 事件发生时鼠标在显示屏上的 y 位置

::

    def clicked(event_data):
        print("widget clicked = " + event_data.widget)
        print("mouse position = " + event_data.x + "." + event_data.y)

    widget.when_clicked = clicked

当鼠标悬停在文本框小部件上时，通过更改其背景颜色（bg）突出显示该文本框小部件。

::

    from guizero import App, TextBox

    def highlight():
        text_box.bg = "lightblue"

    def lowlight():
        text_box.bg = "white"

    app = App()
    text_box = TextBox(app)

    # when the mouse enters the textbox
    text_box.when_mouse_enters = highlight
    # when the mouse leaves the textbox
    text_box.when_mouse_leaves = lowlight

    app.display()


使用 tkinter
===============================

如果您是高级用户，则在使用 guizero 时仍可以使用 tkinter。

您可以在程序中无缝地结合使用 guizero 和 tkinter，利用 guizero 的简化语法，同时如果您需要，仍然可以访问 tkinter 中的所有功能。

使用 tkinter 小部件
-------------------------------

您可以使用 App，Window 和 Box 的 ``add_tk_widget`` 方法将 tk 小部件添加到 guizero 应用程序中。

在这个例子中，我们将 tkinter 小部件 Spinbox 添加到 guizero 应用程序中：

::

    from guizero import App, Text
    from tkinter import Spinbox

    app = App()
    text = Text(app, text="A Spinbox widget")

    spinbox = Spinbox(from_=0, to=10)
    app.add_tk_widget(spinbox)

    a.display()

使用 tkinter 方法
-------------------------------

每个 guizero 小部件本身都包含一个 tk 小部件 - 您可以通过查看小部件的 guizero 文档页面找到哪个小部件。例如，``TextBox`` 包含一个 tkinter ``Entry`` 对象。您可以使用语法 ``<object_name> .tk`` 访问内部对象。

在这个例子中，我们有 App 和 TextBox 小部件，并且正在使用 tk 小部件配置方法在 TextBox 上方更改鼠标光标。

::

    from guizero import App, TextBox
    app = App()
    name = TextBox(app, text="Laura")
    name.tk.config(cursor="target")
    app.display()

获得帮助
===============================

使用 guizero 时可能会遇到问题，因此有一些方法可以帮助您解决问题。

如果您对 guizero 计划有疑问，最好加入社区寻求支持：

* Raspberry Pi 论坛 - 有些人在这些论坛上发布关于 guizero 的问题，社区的其他成员也会提供帮助。 guizero 的创建者定期检查 Python 论坛。
* Stack Overflow - 技术问题的热门网站
* Computing at School - 一个有用的教师网站

如果您想阅读 guizero 的指南和资源，请查看 `示例程序`_ 或者 `github 页面`_ 。

.. _示例程序: https://github.com/lawsie/guizero/tree/master/examples
.. _github 页面: https://github.com/lawsie/guizero


.. _小部件:

小部件
*******************************

App
===============================

包含 ``tkinter.Tk`` 对象

``__init__(self, title="guizero", width=500, height=500, layout="auto", bgcolor=None, bg=None, visible=True)``

App 对象是使用 guizero 创建的所有 GUI 的基础。它是包含所有其他小部件的主窗口。

.. image:: ../images/guizero.24.png

像这样创建一个 ``App`` 对象：

::

    from guizero import App
    app = App()
    app.display()

参数
-------------------------------

创建 App 对象时，可以指定以下任何参数，所有这些参数都是可选的。在括号中指定参数如下：
``app = App(bg="red", height=200)``

=========   =========   ============   ======   ========
参数          数据类型     默认值          强制      描述
=========   =========   ============   ======   ========
bg           color        None 	        No        应用程序窗口和其中的小部件的背景颜色。
height       int          500           No        窗口的高度（以像素为单位）
layout       string       "auto"        No        小部件是否自行打包 ``"auto"`` 或指定它们在网格上的位置 ``"grid"``
title        string       "guizero"     No        标题名
width        int          500           No        窗口的宽度（以像素为单位）
visible      boolean      True          No        应用程序是否可见
bgcolor      string       None          No        替换 ``bg`` 参数
=========   =========   ============   ======   ========

斜体参数仍然可以使用但不推荐使用 - 这意味着您应该停止使用它们，因为它们可能无法在将来版本的 guizero 中使用。

方法
-------------------------------

您可以在 App 对象上调用以下方法。

=================================   ===========================   ============
方法                                  数据类型                        描述
=================================   ===========================   ============
after(time, command, args=None)      time (int),                    在时间毫秒之后安排单次调用命令。（要重复调用相同的命令，请使用repeat() ）
                                     command (功能名称),
                                     args (参数列表)
cancel(command)                      command (功能名称)              取消对命令的预定
destroy()                            -                              销毁小部件
disable()                            -                              禁用应用中的所有小部件，以便无法与之交互
display()                            -                              在屏幕上显示应用程序。您必须在程序结束时调用此方法以在屏幕上显示应用程序。
enable()                             -                              启用应用中的所有小部件
exit_full_screen()                   -                              退出全屏显示
focus()                              -                              重点关注小部件
hide()                               -                              从视图中隐藏应用程序窗口。
on_close(command)                    command (function name)        当用户尝试关闭窗口时调用给定的函数。
repeat(time, command, args=None)     time (int),                    每隔几毫秒重复一次命令。这对于调度定期调用的函数很有用，例如更新从传感器读取的值。
                                     command (功能名称),
                                     args (参数列表)
show()                               -                              如果先前已隐藏，则显示应用程序窗口
update()                             -                              强制应用程序自行更新，如果更改未在UI中反映，则非常有用。
set_full_screen(keybind)             字符串                          将应用程序设置为全屏显示。指定退出全屏的键的选项（默认为'Esc'。）
set_title(title)                     title (string)                 替换为 title 属性
bgcolor                              bgcolor (string)               由 bg 属性取代
=================================   ===========================   ============

斜体参数仍然可以使用但不推荐使用 - 这意味着您应该停止使用它们，因为它们可能无法在将来版本的 guizero 中使用

属性
-------------------------------

您可以设置并获取以下属性：

============   ==========   ==========
方法             数据类型      描述
============   ==========   ==========
bg              color        窗口的背景颜色
enabled         boolean      如果应用已启用，则为 True
height          int          窗户的高度
font            string       小部件应使用的字体
full_screen     boolean      该应用程序是否全屏
layout          string       应用程序使用的布局 ("auto") 或 ("grid")
title           string       窗口的标题
text_size       int          文本小部件的大小应该使用
text_color      color        文本小部件的颜色应该使用
visible         boolean      如果应用程序可见
width           int          窗口的宽度
============   ==========   ==========

将属性称为 ``<name of widget>.property`` 。例如，如果您的 App 对象被称为 app，您将编写 ``app.title`` 。

您可以设置属性（例如 ``app.title =“Hello world”`` ）或获取要使用的属性的值（例如 ``print(app.title)`` ）。

例子
-------------------------------

1. **创建App对象**

通过调用 App() 构造函数创建一个 App 对象。您应该为对象指定一个名称，以便稍后可以引用它 - 在这种情况下，我们称之为 app。最好保留您为 A​​pp 对象提供的名称非常短，因为您必须使用它来告诉其他小部件应该存储在哪里。

在程序结束时，您必须告诉 app 对象开始显示循环。

::

    from guizero import App
    app = App(title="My app", height=300, width=200)
    app.display()

2. **改变标题**

您可以更改 app 对象的标题，如下所示：

::

    from guizero import App
    app = App(title="My app", height=300, width=200)
    app.title = "A different title"
    app.display()

这将显示带有更新标题的应用：

.. image:: ../images/guizero.25.png
